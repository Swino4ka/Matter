// === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã ===
let matter = 0;
let totalMatter = 0;
let maxMatter = 0;
let maxProduction = 0;
let distillPoints = 0;
let distillUpgrades = {
  gen1Boost: false,
  unlockHardPrestige: false
};
let gen1 = {
  amount: 0,
  cost: 10,
  production: 1
};

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ===
function updateUI() {
  document.getElementById("matter").textContent = Math.floor(matter);

  generators.forEach((gen, index) => {
    if (!gen.unlocked) return;
  
    const amountEl = document.getElementById(`gen${index}-amount`);
    const priceEl = document.getElementById(`gen${index}-price`);
  
    if (amountEl) amountEl.textContent = `${gen.amount}x`;
    if (priceEl) {
      priceEl.textContent = `–¶–µ–Ω–∞: ${gen.cost}`;
      priceEl.classList.remove("affordable", "too-expensive");
      if (matter >= gen.cost) {
        priceEl.classList.add("affordable");
      } else {
        priceEl.classList.add("too-expensive");
      }
    }
  });
  const gen1 = generators[0];
  const boost = calculateTotalBoost();
  const rate = gen1.amount * gen1.baseProduction * boost;
  const rateEl = document.getElementById("matterRate");
  if (rateEl) {
    rateEl.textContent = `–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: ${rate.toFixed(2)}/—Å–µ–∫`;
  }
  if (tabContent && tabContent.querySelector("h3")?.textContent === "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
    tabContent.innerHTML = tabs.stats();
  }  
}

function generateMatter() {
  matter += 1;
  updateUI();
}

function buyGenerator() {
  if (matter >= gen1.cost) {
    matter -= gen1.cost;
    gen1.amount++;
    gen1.cost = Math.floor(gen1.cost * 1.5);
    updateUI();
  }
}

let ticksPerSecond = 10; // 10 —Ç–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É = –∫–∞–∂–¥—ã–µ 100–º—Å

setInterval(() => {
  const gen1 = generators[0];
  const boost = calculateTotalBoost();
  const gain = (gen1.amount * gen1.baseProduction * boost) / ticksPerSecond;
  totalMatter += gain;
  if (matter > maxMatter) {
    maxMatter = matter;
  }
  if (gain * ticksPerSecond > maxProduction) {
    maxProduction = gain * ticksPerSecond;
  }
  matter += gain;
  updateUI();
}, 100);

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã ===
function saveGame() {
  const saveData = {
    matter,
    gen1,
    lastSaved: Date.now(),
    totalMatter: totalMatter,
    maxMatter: maxMatter,
    maxProduction: maxProduction
  };
  localStorage.setItem("matterSave", JSON.stringify(saveData));
  updateLastSavedTime();
  console.log("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
}

function calculateDistillPoints() {
  return Math.floor(Math.pow(matter / 1e6, 0.5));
}

function updateLastSavedTime() {
  const span = document.getElementById("lastSavedTime");
  if (span) {
    const time = new Date().toLocaleTimeString();
    span.textContent = time;
  }
}

function loadGame() {
  const save = localStorage.getItem("matterSave");
  if (save) {
    const data = JSON.parse(save);
    matter = data.matter || 0;
    gen1 = data.gen1 || { amount: 0, cost: 10, production: 1 };
    totalMatter = data.totalMatter || 0;
    maxMatter = data.maxMatter || 0;
    maxProduction = data.maxProduction || 0;
  
    // –æ—Ç–∫—Ä—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    generators.forEach((gen, i) => {
      if (i > 0 && generators[i - 1].amount > 0) {
        gen.unlocked = true;
      }
    });
  
    updateUI();
    setTimeout(updateLastSavedTime, 100);
  }  
}

function autoSaveLoop() {
  setInterval(saveGame, 60000); // —Ä–∞–∑ –≤ 60 —Å–µ–∫
}

// === –ö–Ω–æ–ø–∫–∏ UI ===
document.getElementById("generateMatterBtn").addEventListener("click", generateMatter);

// === Tabs ===
const tabButtons = document.querySelectorAll(".tabBtn");
const tabContent = document.getElementById("tabContent");

const tabs = {
    prestige: () => {
        const available = calculateDistillPoints();
        let upgradesHtml = '';
      
        if (distillPoints > 0 || distillUpgrades.gen1Boost || distillUpgrades.unlockHardPrestige) {
          upgradesHtml = `
            <h4>üõí –ú–∞–≥–∞–∑–∏–Ω</h4>
            <ul>
              <li>
                –£—Å–∏–ª–µ–Ω–∏–µ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ 1 –≤ 1.2x 
                ${distillUpgrades.gen1Boost ? "‚úÖ" : `<button onclick="buyUpgrade('gen1Boost')">–ö—É–ø–∏—Ç—å (2 –û–î)</button>`}
              </li>
              <li>
                –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –°–ª–∏—è–Ω–∏–π –†–µ–∞–ª—å–Ω–æ—Å—Ç–µ–π 
                ${distillUpgrades.unlockHardPrestige ? "‚úÖ" : `<button onclick="buyUpgrade('unlockHardPrestige')">–ö—É–ø–∏—Ç—å (10 –û–î)</button>`}
              </li>
            </ul>
          `;
        }
      
        return `
          <h3>üí† –ü—Ä–µ—Å—Ç–∏–∂: –î–µ—Å—Ç–∏–ª–ª—è—Ü–∏—è</h3>
          <p>–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å <strong>${available}</strong> –æ—á–∫–æ–≤ –¥–µ—Å—Ç–∏–ª–ª—è—Ü–∏–∏ (–û–î).</p>
          <div class="distill-controls">
            <button onclick="performDistill()">–î–µ—Å—Ç–∏–ª–ª–∏—Ä–æ–≤–∞—Ç—å</button>
            <button class="info-btn" onclick="openDistillInfo()">‚ÑπÔ∏è</button>
          </div>
          <p><strong>–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏ –¥–µ—Å—Ç–∏–ª–ª—è—Ü–∏–∏ (–û–î):</strong> ${distillPoints}</p>
          ${upgradesHtml}
        `;
      },
    achievements: `<h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3><p>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.</p>`,
    stats: () => {
        let genList = generators.map((g, i) => `<li>${g.name}: ${g.amount}x</li>`).join('');
        return `
          <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <ul>
            <li><strong>–¢–µ–∫—É—â–∞—è –º–∞—Ç–µ—Ä–∏—è:</strong> ${Math.floor(matter)}</li>
            <li><strong>–í—Å–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∏:</strong> ${Math.floor(totalMatter)}</li>
            <li><strong>–ú–∞–∫—Å–∏–º—É–º –º–∞—Ç–µ—Ä–∏–∏:</strong> ${Math.floor(maxMatter)}</li>
            <li><strong>–ú–∞–∫—Å. –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ/—Å–µ–∫:</strong> ${maxProduction.toFixed(2)}</li>
            <li><strong>–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤:</strong> ${generators.reduce((a, g) => a + g.amount, 0)}</li>
            <li><strong>–ü–æ —É—Ä–æ–≤–Ω—è–º:</strong><ul>${genList}</ul></li>
          </ul>
        `;
      },
    settings: `
      <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
      <button id="saveNowBtn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–π—á–∞—Å</button>
      <button id="resetBtn">üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</button>
      <button id="exportBtn">üì§ –≠–∫—Å–ø–æ—Ä—Ç</button>
      <button id="importBtn">üì• –ò–º–ø–æ—Ä—Ç</button>
      <input type="text" id="importField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ" style="width:100%; margin-top: 10px;" />
      <p style="margin-top: 10px;">–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: <span id="lastSavedTime">‚Äî</span></p>
    `
};

tabButtons.forEach(btn => {
  btn.addEventListener("click", () => {
    const tab = btn.dataset.tab;
    tabContent.innerHTML = typeof tabs[tab] === "function" ? tabs[tab]() : tabs[tab];
  });
});

document.addEventListener("click", (e) => {
  const id = e.target.id;

  if (id === "saveNowBtn") {
    saveGame();
    alert("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é!");
  }

  if (id === "resetBtn") {
    if (confirm("–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?")) {
      localStorage.removeItem("matterSave");
      location.reload();
    }
  }

  if (id === "exportBtn") {
    const saveData = localStorage.getItem("matterSave");
    navigator.clipboard.writeText(saveData).then(() => {
      alert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
    });
  }

  if (id === "importBtn") {
    const importStr = document.getElementById("importField").value;
    try {
      const parsed = JSON.parse(importStr);
      localStorage.setItem("matterSave", JSON.stringify(parsed));
      alert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...");
      location.reload();
    } catch {
      alert("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!");
    }
  }
});

const generators = [
  { name: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 1", amount: 0, baseProduction: 1, cost: 10, unlocked: true },
  { name: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 2", amount: 0, cost: 100, unlocked: false },
  { name: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3", amount: 0, cost: 1000, unlocked: false },
  { name: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 4", amount: 0, cost: 10000, unlocked: false },
];

function renderGenerators() {
  const container = document.getElementById("generatorsContainer");
  container.innerHTML = "";

  generators.forEach((gen, index) => {
    if (!gen.unlocked) return;

    const section = document.createElement("section");

    section.innerHTML = `
    <h2>${gen.name}</h2>
    <div class="gen-meta">
      <div class="gen-price" id="gen${index}-price">–¶–µ–Ω–∞: ${gen.cost}</div>
      <div class="gen-amount" id="gen${index}-amount">${gen.amount}x</div>
    </div>
    <div class="generator-buttons">
      <button onclick="buyGenerator(${index}, 1)">–ö—É–ø–∏—Ç—å 1</button>
      <button onclick="buyGenerator(${index}, 10)">–ö—É–ø–∏—Ç—å 10</button>
      <button onclick="buyMaxGenerator(${index})">–ö—É–ø–∏—Ç—å –º–∞–∫—Å</button>
    </div>
    `;

    container.appendChild(section);
  });
}

function buyGenerator(index, amount = 1) {
  const gen = generators[index];
  let bought = 0;

  for (let i = 0; i < amount; i++) {
    if (matter >= gen.cost) {
      matter -= gen.cost;
      gen.amount++;
      gen.cost = Math.floor(gen.cost * 1.5);
      bought++;

      // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
      if (generators[index + 1] && !generators[index + 1].unlocked) {
        generators[index + 1].unlocked = true;
      }
    } else {
      break;
    }
  }

  if (bought > 0) {
    const gain = `+${bought} ${gen.name}`;
    spawnClickEffectCenter(gain);
  }

  updateUI();
  renderGenerators();
}

function buyMaxGenerator(index) {
  const gen = generators[index];
  let bought = 0;

  while (matter >= gen.cost) {
    matter -= gen.cost;
    gen.amount++;
    gen.cost = Math.floor(gen.cost * 1.5);
    bought++;

    if (generators[index + 1] && !generators[index + 1].unlocked) {
      generators[index + 1].unlocked = true;
    }
  }

  if (bought > 0) {
    const msg = `+${bought} ${gen.name}(–æ–≤)`;
    spawnClickEffectCenter(msg);
  }

  updateUI();
  renderGenerators();
}


function calculateTotalBoost() {
  let totalBoost = 1;
  for (let i = 1; i < generators.length; i++) {
    totalBoost *= Math.pow(1.02, generators[i].amount);
  }
  return totalBoost;
}

document.getElementById("generateMatterBtn").addEventListener("click", () => {
  const gen1 = generators[0];
  const boost = calculateTotalBoost();
  matter += gen1.baseProduction * boost;
  updateUI();
});

document.getElementById("generateMatterBtn").addEventListener("click", (e) => {
  const gen1 = generators[0];
  const boost = calculateTotalBoost();
  const gain = gen1.baseProduction * boost;
  matter += gain;
  updateUI();
  spawnClickEffect(e.clientX, e.clientY, gain);
});

function spawnClickEffect(x, y, amount) {
  const el = document.createElement("div");
  el.className = "click-float";
  el.style.left = `${x}px`;
  el.style.top = `${y}px`;
  el.textContent = `+${Math.floor(amount)}`;
  document.getElementById("clickEffects").appendChild(el);

  setTimeout(() => {
    el.remove();
  }, 1000);
}

function spawnClickEffectCenter(text) {
  const el = document.createElement("div");
  el.className = "click-float";
  el.style.left = "50%";
  el.style.top = "50%";
  el.style.transform = "translate(-50%, -50%)";
  el.textContent = text;
  document.getElementById("clickEffects").appendChild(el);

  setTimeout(() => {
    el.remove();
  }, 1000);
}

function performDistill() {
  const earned = calculateDistillPoints();
  if (earned < 1) {
    alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∏ –¥–ª—è –¥–µ—Å—Ç–∏–ª–ª—è—Ü–∏–∏.");
    return;
  }

  distillPoints += earned;
  matter = 0;

  // –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∂–µ–ª–∞–Ω–∏—é
  // totalMatter = 0;

  updateUI();
  renderGenerators();
  alert(`–¢—ã –ø–æ–ª—É—á–∏–ª ${earned} –û–î!`);
}

function buyUpgrade(id) {
  if (id === 'gen1Boost' && distillPoints >= 2 && !distillUpgrades.gen1Boost) {
    distillPoints -= 2;
    distillUpgrades.gen1Boost = true;
  }

  if (id === 'unlockHardPrestige' && distillPoints >= 10 && !distillUpgrades.unlockHardPrestige) {
    distillPoints -= 10;
    distillUpgrades.unlockHardPrestige = true;
  }

  updateUI();
  tabContent.innerHTML = tabs.prestige(); // –æ–±–Ω–æ–≤–∏–º UI
}

function calculateDistillPoints() {
  return Math.floor(Math.pow(matter / 1e6, 0.5));
}

// === –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã ===
loadGame();
renderGenerators();
updateUI();
autoSaveLoop();